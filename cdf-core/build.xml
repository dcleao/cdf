<!--===========================================================================
  This is the build file for the Community Dashboard Framework Plugin project.

  This build file will use the subfloor.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.

  See subfloor.xml for more details
============================================================================-->
<project name="Community Dashboard Framework" basedir="." default="jar"
         xmlns:ivy="antlib:org.apache.ivy.ant">

  <description>
    This build file is used to create the CDF core project
    and works with the subfloor.xml file.
  </description>

  <!-- Import subfloor.xml which contains all the default tasks -->
  <import file="../build-res/subfloor.xml" id="subfloor"/>
  <import file="../build-res/subfloor-js.xml"/>

  <property file="../override.properties"
            description="Top level Properties customized for your development environment belong in this file. This file will never be checked into the SCM."/>
  <property file="../build.properties"
            description="Top level Properties customized for your particular project belong in this file."/>

  <!-- karma config files -->
  <property name="js.karma.ci.config.legacy" value="config/karma.ci.conf.legacy.js"/>

  <!-- Overriding values in subfloor-js.xml -->
  <!-- Path for node_modules dir -->
  <property name="nodemodules.local.dir" value="node_modules"/>
  <property name="nodemodules.local.dir.bin" value="${nodemodules.local.dir}\.bin"/>
  <property name="nodemodules.dir" value="${basedir}/${nodemodules.local.dir}" description="Directory with require dependencies to compile."/>

  <property name="plugin.name" value="pentaho-cdf" description="Name of the plugin"/>

  <property name="resource.dir" value="resources" description="Name of the resource directory"/>
  <property name="stage.dir" value="${bin.dir}/stage" description="Name of the resource directory"/>
  <property name="samples.stage.dir" value="${bin.dir}/stage-samples" description="Name of the resource directory"/>
  <property name="runtimelib.dir" value="${basedir}/runtime-lib"
            description="Directory that hosts Jar files required to run project source.  (IVY will populate this directory with required jars)"/>
  
  <!-- Build the project.revision property -->
  <property name="distribution.version" value="${project.stage}-${project.version}"/>

  <!--
    AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
    THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
    FOUND IN subfloor.xml.
  -->

  <!-- overrides subfloor clean to also cleanup runtime-lib -->
  <target name="clean" depends="subfloor.clean, subfloor-js.clean-js">
    <echo message="Deleting... ${runtimelib.dir}"/>
    <delete dir="${runtimelib.dir}"/>
    <echo message="Deleting... ${nodemodules.dir}"/>
    <delete dir="${nodemodules.dir}"/>
    <echo message="Deleting RequireJS Configurations"/>
    <delete file="build-res/requireCfg-raw.js"/>
    <delete file="build-res/requireCfg.js"/>
    <echo message="Deleting... build-res"/>
    <delete dir="build-res"/>
  </target>

  <!-- overrides subfloor dist to also cleanup runtime-lib -->
  <target name="dist" depends="clean,subfloor.resolve,subfloor.jar,subfloor.source.jar"/>

  <target name="compile.compile" depends="init, resolve" description="Performs the actual javac compile">
    <javac destdir="${classes.dir}"
           debug="${javac.debug}"
           deprecation="${javac.deprecation}"
           fork="true"
           source="${javac.source}"
           target="${javac.target}">
      <classpath>
        <path refid="classpath"/>
        <fileset dir="runtime-lib">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
      <src path="${src.dir}"/>
    </javac>
  </target>

  <condition property="is.roundtrip">
    <istrue value="${test.roundtrip}"/>
  </condition>
  <condition property="is.not.roundtrip">
    <isfalse value="${test.roundtrip}"/>
  </condition>

  <!-- subfloor test override -->
  <target name="test" depends="compile,compile-tests" description="Compiles and runs unit tests">
    <junit printsummary="yes" haltonfailure="${junit.haltonfailure}">
      <sysproperty key="java.awt.headless" value="${headless.unittest}"/>
      <classpath refid="test.classpath"/>
      <formatter type="plain"/>
      <batchtest fork="yes" todir="${testbin.dir}">
        <fileset dir="${testsrc.dir}" casesensitive="yes">
          <include name="**/RoundtripSuite.java" if="is.roundtrip"/>
          <include name="**/Test*.java" if="is.not.roundtrip"/>
          <include name="**/*Test.java" if="is.not.roundtrip"/>
        </fileset>
        <formatter type="xml"/>
      </batchtest>
    </junit>
  </target>

  <tstamp/>

  <echo>distribution.version = ${distribution.version}</echo>

  <!-- subfloor test override so we can add resolve-dev -->
  <target name="resolve"
          depends="resolve-default, resolve-test, resolve-runtime, subfloor-js.resolve-js, ivy.check-releasable"
          description="Retrieves all the dependent libraries"/>

  <target name="resolve-runtime" depends="resolve-init">
    <ivy:resolve file="ivy.xml" conf="runtime"/>
    <ivy:retrieve conf="runtime" pattern="${runtimelib.dir}/[module]-[revision](-[classifier]).[ext]"/>
  </target>

  <!-- Only run if there is a package.json file -->
  <target name="npm-install" depends="check-pentaho-js-build-downloaded">
    <if>
      <available file="package.json"/>
      <then>
        <if>
          <isset property="isWindows"/>
          <then>
            <exec executable="npm.cmd">
              <arg value="install"/>
            </exec>
          </then>
          <else>
            <exec executable="npm">
              <arg value="install"/>
            </exec>
          </else>
        </if>
      </then>
      <else>
        <echo>No package.json found, using the default</echo>
        <if>
          <isset property="isWindows"/>
          <then>
            <exec executable="npm.cmd">
              <arg value="install"/>
              <arg value="build-res/pentaho-js-build"/>
            </exec>
          </then>
          <else>
            <exec executable="npm">
              <arg value="install"/>
              <arg value="build-res/pentaho-js-build"/>
            </exec>
          </else>
        </if>
      </else>
    </if>
  </target>

  <target name="run-karma" depends="install-antcontrib, npm-install">
    <!-- compile the require file -->
    <echo message="Collecting RequireJS Configurations"/>
    <delete file="build-res/requireCfg-raw.js"/>
    <concat destfile="build-res/requireCfg-raw.js" append="true" force="yes">
      <fileset dir="cdf" casesensitive="yes">
        <include name="*/*-require-js-cfg.js"/>
      </fileset>
    </concat>

    <!-- Check to see if karma is on the PATH -->
    <available file="karma" filepath="${env.PATH}" property="karma-is-available"/>
    <available file="karma.cmd" filepath="${nodemodules.local.dir.bin}" property="karma-is-available-windows"/>

    <if>
      <isset property="isWindows"/>
      <then>
        <if>
          <not>
            <isset property="karma-is-available-windows"/>
          </not>
          <then>
            <echo message="${nodemodules.local.dir.bin}"/>
            <fail>karma.cmd is not available on the '${nodemodules.local.dir.bin}'. Unit tests could not be run.</fail>
          </then>
        </if>
      </then>
      <else>
        <if>
          <not>
            <isset property="karma-is-available"/>
          </not>
          <then>
            <fail>karma is not available on the PATH. Unit tests could not be run.</fail>
          </then>
        </if>
      </else>
    </if>
    <if>
      <available file="${js.karma.ci.config}"/>
      <then>
        <if>
          <isset property="isWindows"/>
          <then>
            <!-- we have karma available, use it to run the tests -->
            <exec executable="${nodemodules.local.dir.bin}\karma.cmd">
              <arg value="start"/>
              <arg value="${js.karma.ci.config}"/>
              <!-- if we are running via ant, then assume we must 'single-run' -->
              <arg value="--single-run"/>
            </exec>
          </then>
          <else>
            <!-- we have karma available, use it to run the tests -->
            <exec executable="karma">
              <arg value="start"/>
              <arg value="${js.karma.ci.config}"/>
              <!-- if we are running via ant, then assume we must 'single-run' -->
              <arg value="--single-run"/>
            </exec>
          </else>
        </if>
      </then>
      <else>
        <fail>There is no karma configuration file available (looking for: ${js.karma.ci.config})</fail>
      </else>
    </if>
  </target>

  <target name="test-js-require" depends="subfloor-js.resolve-js">
    <antcall target="run-karma"/>
  </target>

  <target name="test-js-legacy">
    <antcall target="run-karma">
      <param name="js.karma.ci.config" value="${js.karma.ci.config.legacy}"/>
    </antcall>
  </target>

  <target name="test-js" depends="test-js-require, test-js-legacy">
  </target>

</project>
