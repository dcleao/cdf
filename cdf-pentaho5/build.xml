<!--===========================================================================
  This is the build file for the Community Dashboard Framework Plugin project.

  This build file will use the subfloor.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.

  See subfloor.xml for more details
============================================================================-->
<project name="Community Dashboard Framework" basedir="." default="jar" xmlns:ivy="antlib:org.apache.ivy.ant">

  <description>
    This build file is used to create the CDF project and works with the subfloor.xml file.
  </description>

  <property file="../override.properties"
            description="Top level Properties customized for your development environment belong in this file.  This file will never be checked into the SCM."/>
  <property file="../build.properties"
            description="Top level Properties customized for your particular project belong in this file."/>

  <!-- Import subfloor.xml which contains all the default tasks -->
  <import file="../build-res/subfloor-js.xml"/>
  <import file="../build-res/subfloor-pkg.xml" id="subfloor-pkg"/>
  
  <!-- karma config files -->
  <property name="js.karma.ci.config.legacy" value="config/karma.ci.conf.legacy.js"/>

  <!-- Global properties -->
  <property name='js.dir' value='cdf' />
  <property name='js-legacy.dir' value='${js.dir}/js'/>
  <property name='js-legacy-lib.dir' value='${js.dir}/js/lib'/>
  <property name='js-modules.dir' value='${js.dir}/js-modules'/>
  <property name='js-lib.dir' value='${js.dir}/js-lib'/>

  <property name="resources.properties.name" value="resources.properties" />
  <property name="resources.legacy.properties.name" value="resources.legacy.properties" />
  <property name="resources.blueprint.properties.name" value="resources.blueprint.properties" />
  <property name="resources.blueprint.legacy.properties.name" value="resources.blueprint.legacy.properties" />
  <property name="resources.bootstrap.properties.name" value="resources.bootstrap.properties" />
  <property name="resources.bootstrap.legacy.properties.name" value="resources.bootstrap.legacy.properties" />
  <property name="resources.cdf.dashboards.properties.name" value="resources.cdf.dashboards.properties" />
  <property name="resources.cdf.dashboards.legacy.properties.name" value="resources.cdf.dashboards.legacy.properties" />

  <property name="resource.dir" value="resource" description="Name of the resource directory"/>
  <property name="runtimelib.dir" value="${basedir}/runtime-lib"
            description="Directory that hosts Jar files required to run project source.  (IVY will populate this directory with required jars)"/>

  <property name='core.dir' value='../cdf-core' description="Name of core dir"/>
  <property name='core-js.dir' value='${core.dir}/${js-modules.dir}'/>
  <property name='core-js-lib.dir' value='${core.dir}/${js-lib.dir}'/>
  <property name='core-js-legacy.dir' value='${core.dir}/${js-legacy.dir}'/>
  <property name='core-js-legacy-lib.dir' value='${core.dir}/${js-legacy-lib.dir}'/>

  <property name='cdf-core-lib-require-js-cfg.name' value='cdf-core-lib-require-js-cfg.js'/>
  
  <property name='core-resource.dir' value='${core.dir}/${resource.dir}'/>

  <property name='pentaho-base.dir' value='../cdf-pentaho-base' description="Name of pentaho base dir"/>
  <property name='pentaho-base-src.dir' value='${pentaho-base.dir}/src'/>
  <property name='pentaho-base-test-src.dir' value='${pentaho-base.dir}/test-src'/>
  <property name='pentaho-base-js.dir' value='${pentaho-base.dir}/${js-modules.dir}'/>
  <property name='pentaho-base-js-legacy.dir' value='${pentaho-base.dir}/${js-legacy.dir}'/>
  <property name='pentaho-base-js-lib.dir' value='${pentaho-base.dir}/${js-lib.dir}'/>
  <property name='pentaho-base-resource.dir' value='${pentaho-base.dir}/${resource.dir}'/>

  <property name='pentaho.dir' value='.' description="Name of pentaho dir"/>
  <property name='pentaho-src.dir' value='${pentaho.dir}/src' description="Name of pentaho src dir"/>
  <property name='pentaho-js.dir' value='${pentaho.dir}/${js-modules.dir}'/>
  <property name='pentaho-js-legacy.dir' value='${pentaho.dir}/${js-legacy.dir}'/>
  <property name='pentaho-js-lib.dir' value='${pentaho.dir}/${js-lib.dir}'/>
  <property name='pentaho-resource.dir' value='${pentaho.dir}/${resource.dir}'/>

  <property name="plugin.name" value="pentaho-cdf" description="Name of the plugin"/>
  <property name="bin.dir" value="bin"/>
  <property name="stage.dir" value="${bin.dir}/stage" description="Name of the resource directory"/>
  <property name="samples.stage.dir" value="${bin.dir}/stage-samples" description="Name of the stage samples directory"/>
  <property name="solution.stage.dir" value="${bin.dir}/stage-solution" description="Name of the stage solution directory"/>
  <property name="plugin.local.install.solutions.dir" value="solution"/>
  <property name="plugin.artifact.id" value="${plugin.name}"/>
  <property name="plugin.zipfile" value="${plugin.artifact.id}-${project.revision}.zip"/>
  <property name="plugin.samples.zipfile" value="${plugin.artifact.id}-samples-${project.revision}.zip"/>
  <property name="plugin.solution.zipfile" value="${plugin.artifact.id}-solution-${project.revision}.zip"/>

  <property name='stage-resources.path' value='${stage.dir}/${plugin.name}/${resources.properties.name}'/>
  <property name='core-resources.path' value='${core-resource.dir}/${resources.properties.name}'/>
  <property name='core-resources.legacy.path' value='${core-resource.dir}/${resources.legacy.properties.name}'/>

  <property name='core-resources.blueprint.path' value='${core-resource.dir}/${resources.blueprint.properties.name}'/>
  <property name='core-resources.blueprint.legacy.path' value='${core-resource.dir}/${resources.blueprint.legacy.properties.name}'/>

  <property name='core-resources.bootstrap.path' value='${core-resource.dir}/${resources.bootstrap.properties.name}'/>
  <property name='core-resources.bootstrap.legacy.path' value='${core-resource.dir}/${resources.bootstrap.legacy.properties.name}'/>

  <property name='core-resources.cdf.dashboards.path' value='${core-resource.dir}/${resources.cdf.dashboards.properties.name}'/>
  <property name='core-resources.cdf.dashboards.legacy.path' value='${core-resource.dir}/${resources.cdf.dashboards.legacy.properties.name}'/>


  <property name='base-resources.legacy.path' value='${pentaho-base-resource.dir}/${resources.legacy.properties.name}'/>
  <property name='resources.path' value='${resource.dir}/${resources.properties.name}'/>

  <property name="js.module.script.namespace" value="cdf"/>
  <property name="js.module.script.dir" value="cdf/js"/>

  <property name="js.module.script.agg.dir" value="build-res/cdf-module-scripts" />

  <property name="build.js.path" value="build-res/cdf.build.js" description="cdf.build.js location"/>
  <!-- Path for node_modules dir -->
  <property name="nodemodules.local.dir" value="node_modules"/>
  <property name="nodemodules.dir" value="${basedir}/${nodemodules.local.dir}" description="Directory with require dependencies to compile."/>
  <property name="rjs.path" value="${nodemodules.local.dir}/requirejs/bin/r.js" description="r.js location"/>

  <property name='test-js-res.dir' value='${bin.dir}/test-js-res' description='Resources for Karma tests' />
  <property name='test-js-res.js-modules.dir' value='${test-js-res.dir}/cdf/js-modules' description='Modules for Karma tests' />
  <property name='test-js-res.js-lib.dir' value='${test-js-res.dir}/cdf/js-lib' description='Libs for Karma tests' />
  <property name='test-js.dir' value='${pentaho.dir}/test-js' description='Karma tests dir' />

  <path id="classpath">
    <fileset dir="${devlib.dir}">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${lib.dir}">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${runtimelib.dir}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <target name="compile.compile" depends="init" description="Performs the actual javac compile">
    <javac destdir="${classes.dir}"
           debug="${javac.debug}"
           deprecation="${javac.deprecation}"
           fork="true"
           source="${javac.source}"
           target="${javac.target}">
      <classpath>
        <path refid="classpath"/>
      </classpath>
      <src path="${src.dir}"/>
      <src path="${pentaho-base-src.dir}"/>
    </javac>
  </target>

  <!-- subfloor test override -->

  <target name="test" depends="compile,compile-tests, init-test-reports" description="Compiles and runs unit tests">
    <junit maxmemory="${junit.maxmemory}"
           dir="${junit.base.dir}"
           fork="yes"
           forkmode="${junit.forkmode}"
           failureProperty="test.failed"
           haltonfailure="${junit.haltonfailure}"
           haltonerror="${junit.haltonerror}"
           printsummary="yes">
      <sysproperty key="java.awt.headless" value="${headless.unittest}" />

      <syspropertyset>
        <propertyref prefix="junit.sysprop." />
        <mapper type="glob" from="junit.sysprop.*" to="*"/>
      </syspropertyset>

      <classpath refid="test.classpath" />
      <formatter type="xml" />
      <test name="${testcase}" todir="${testreports.xml.dir}" if="testcase" />
      <batchtest fork="yes" todir="${testreports.xml.dir}" unless="testcase">
        <fileset dir="${testsrc.dir}" casesensitive="yes">
          <include name="**/*Test.java" />
        </fileset>
        <fileset dir="${pentaho-base-test-src.dir}" casesensitive="yes" >
          <include name="**/*Test.java" />
        </fileset>
      </batchtest>
    </junit>

    <junitreport todir="${testreports.html.dir}">
      <fileset dir="${testreports.xml.dir}">
        <include name="TEST-*.xml" />
      </fileset>
      <report format="frames" todir="${testreports.html.dir}" />
    </junitreport>
  </target>

  <target name="compile-tests" depends="init-tests">
    <javac destdir="${testclasses.dir}"
           debug="true"
           optimize="false"
           source="${javac.source}"
           target="${javac.target}"
           fork="true"
           encoding="UTF-8">
      <src path="${testsrc.dir}" />
      <src path="${pentaho-base-test-src.dir}" />
      <classpath refid="test.classpath" />
    </javac>

    <!-- Copy the non-java files from the source directory to the test classes directory -->
    <copy todir="${testclasses.dir}">
      <fileset dir="${testsrc.dir}">
        <exclude name="**/*.java" />
      </fileset>
    </copy>
  </target>

  <target name="dist" depends="clean-dist,resolve,resolve-js,jar,dist-plugin,dist-samples"/>

  <target name="dist-compile" depends="clean-dist,jar,dist-plugin"/>

  <!-- overrides subfloor clean to also cleanup runtime-lib -->
  <target name="clean" depends="subfloor.clean, subfloor-js.clean-js">
    <delete dir="${runtimelib.dir}"/>
    <delete dir="${dist.dir}"/>
    <echo message="Deleting... ${nodemodules.dir}"/>
    <delete dir="${nodemodules.dir}"/>
    <echo message="Deleting RequireJS Configurations"/>
    <delete file="build-res/requireCfg-raw.js"/>
    <delete file="build-res/requireCfg.js"/>
    <echo message="Deleting... build-res/pentaho-js-build"/>
    <delete dir="build-res/pentaho-js-build"/>
    <echo message="Deleting... build-res/pentaho-js-build.zip"/>
    <delete file="build-res/pentaho-js-build.zip"/>
  </target>

  <!--=======================================================================
    dist

    Creates a distribution of this project's plugin zip
    ====================================================================-->

  <target name="make-stage">
    <!-- Make dirs-->
    <mkdir dir="${stage.dir}"/>
    <mkdir dir="${stage.dir}/${plugin.name}"/>
    <mkdir dir="${stage.dir}/${plugin.name}/lib"/>
    <mkdir dir="${stage.dir}/${plugin.name}/resources"/>

    <mkdir dir="${stage.dir}/${plugin.name}/actions"/>
  </target>

  <target name="clean-bin-dir">
    <!-- delete and re-create the plugin dist folder tree -->
    <delete dir="${bin.dir}"/>
  </target>

  <target name="dist-plugin" depends="clean-bin-dir,subfloor-js.resolve-js,jar,make-stage,dist-js" description="Creates a distribution">

    <!-- handle js -->
    <copy todir="${stage.dir}/${plugin.name}/js/" overwrite="true">
      <fileset dir="bin/js-source/raw/cdf"/>
    </copy>
    <copy todir="${stage.dir}/${plugin.name}/js/compressed" overwrite="true">
      <fileset dir="bin/js-source/compressed/cdf">
        <exclude name="**/*-require-js-cfg.js*"/>
      </fileset>
    </copy>

    <!-- handle legacy js -->
    <copy todir="${stage.dir}/${plugin.name}/js-legacy" overwrite="true">
      <fileset dir="bin/js-source/js-legacy/"/>
    </copy>

    <!-- handle extra resources -->
    <copy todir='${stage.dir}/${plugin.name}'>
      <fileset dir='${core-resource.dir}'>
        <exclude name="${resources.properties.name}"/>
        <exclude name="${resources.blueprint.properties.name}"/>
        <exclude name="${resources.bootstrap.properties.name}"/>
        <exclude name="${resources.cdf.dashboards.properties.name}"/>
        <exclude name="${resources.legacy.properties.name}"/>
        <exclude name="${resources.blueprint.legacy.properties.name}"/>
        <exclude name="${resources.bootstrap.legacy.properties.name}"/>
        <exclude name="${resources.cdf.dashboards.legacy.properties.name}"/>
      </fileset>
    </copy>
    <copy todir="${stage.dir}/${plugin.name}" overwrite="true">
      <fileset dir="${resource.dir}">
        <include name="**/*"/>
        <exclude name="${resources.properties.name}"/>
      </fileset>
    </copy>
    <!-- handle legacy resource files -->
    <copy file="${core-resources.blueprint.legacy.path}"
              toFile="${stage.dir}/${plugin.name}/${resources.blueprint.properties.name}"/>
    <copy file="${core-resources.bootstrap.legacy.path}"
              toFile="${stage.dir}/${plugin.name}/${resources.bootstrap.properties.name}"/>
    <copy file="${core-resources.cdf.dashboards.legacy.path}"
              toFile="${stage.dir}/${plugin.name}/${resources.cdf.dashboards.properties.name}"/>

    <!-- handle libs -->
    <!--  Copy the plugin jar to the plugin dist lib folder -->
    <copy todir="${stage.dir}/${plugin.name}/lib" overwrite="true">
      <fileset dir="${dist.dir}">
        <include name="${ivy.artifact.id}-${project.revision}.jar"/>
      </fileset>
      <fileset dir="${runtimelib.dir}">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${devlib.dir}">
        <include name="*.jar"/>
      </fileset>
    </copy>

    <!-- copy over all the xactions within the cdf folder -->
    <copy todir="${stage.dir}/${plugin.name}/actions" overwrite="true">
      <fileset dir="solution/cdf/components">
        <include name="*.xaction*"/>
        <include name="*.xml"/>
        <include name="*.js"/>
        <exclude name="index.xml"/>
      </fileset>
    </copy>

    <copy todir="${stage.dir}/${plugin.name}" overwrite="true">
      <fileset dir="${basedir}">
        <include name="readme.txt"/>
      </fileset>
    </copy>

    <!-- create the version file -->
    <tstamp/>
    <property name="sequential.build.id" value="manual-${DSTAMP}"/>

    <!-- blank out the AMD module as the Shim configuration is used at runtime instead -->
    <!-- echo message="" file="${stage.dir}/${plugin.name}/js/cdf-module.js"/ -->

    <replace file="${stage.dir}/${plugin.name}/resources/languages/Messages.properties" token="Version 4.0"
             value="Version ${project.revision}"/>
    <replace file="${stage.dir}/${plugin.name}/resources/languages/Messages_en.properties" token="Version 4.0"
             value="Version ${project.revision}"/>
    <replace file="${stage.dir}/${plugin.name}/resources/languages/Messages_hr.properties" token="Version 4.0"
             value="Version ${project.revision}"/>
    <replace file="${stage.dir}/${plugin.name}/resources/languages/Messages_it.properties" token="Version 4.0"
             value="Version ${project.revision}"/>

    <echo file="${stage.dir}/${plugin.name}/version.xml"
          message="&lt;version branch='${project.stage}' buildId='${sequential.build.id}'>${project.revision}&lt;/version>"/>

    <!-- create a zip file -->
    <zip zipfile="${dist.dir}/${plugin.zipfile}"
         basedir="${stage.dir}"
         includes="pentaho-cdf/**/*"
         excludes="**/Thumbs.db"/>

    <echo file="${dist.dir}/marketplace.xml">
      &lt;version&gt;
        &lt;branch&gt;${project.stage}&lt;/branch&gt;
        &lt;version&gt;${project.revision}&lt;/version&gt;
        &lt;name&gt;${marketplace.metadata.name}&lt;/name&gt;
        &lt;package_url&gt;
          ${marketplace.metadata.package_url}
        &lt;/package_url&gt;
        &lt;samples_url&gt;
          ${marketplace.metadata.samples_url}
        &lt;/samples_url&gt;
        &lt;description&gt;
          ${marketplace.metadata.description}
        &lt;/description&gt;
        &lt;build_id&gt;${sequential.build.id}&lt;/build_id&gt;
        &lt;min_parent_version&gt;${marketplace.metadata.min_parent_version}&lt;/min_parent_version&gt;
        &lt;development_stage&gt;
          &lt;lane&gt;${marketplace.metadata.development_stage.lane}&lt;/lane&gt;
          &lt;phase&gt;${marketplace.metadata.development_stage.phase}&lt;/phase&gt;
      &lt;/version&gt;</echo>

  </target>

  <target name="dist-js" depends="install-antcontrib, check-pentaho-js-build-downloaded"
          description="Creates the js distribution for js">
    <delete dir="${js.build.output.dir}"/>
    <delete dir="${js.module.script.agg.dir}"/>
    <echo message="js.module.script.agg.dir: ${js.module.script.agg.dir}"/>
    <mkdir dir="${js.module.script.agg.dir}"/>

    <!-- handle js to temp location for compilation -->
    <!-- Copy js -->
    <echo message="Copying js source"/>
    <copy todir='${js.module.script.agg.dir}/cdf'>
      <fileset dir='${core-js.dir}'/>
      <fileset dir='${pentaho-base-js.dir}'>
         <exclude name="ccc.js"/>
      </fileset>
      <fileset dir="${pentaho-js.dir}" />
    </copy>
    <copy todir='${js.module.script.agg.dir}/cdf/lib'>
      <fileset dir='${core-js-lib.dir}'/>
    </copy>

    <delete file="build-res/requireCfg-raw.js" />
    <delete file="build-res/requireCfg.js" />
    <echo message="var requireCfg={paths:{},shim:{}};" file="build-res/requireCfg-raw.js" force="true" append="false"/>
    <concat destfile="build-res/requireCfg-raw.js" append="true" force="yes">
      <fileset dir="${js.module.script.agg.dir}" casesensitive="yes">
        <include name="**/*-require-js-cfg.js"/>
      </fileset>
    </concat>
    <echo message="require(requireCfg);" append="false" file="build-res/requireCfg.js"/>

    <path id="build.classpath">
      <fileset dir="build-res/pentaho-js-build/libs"> <!-- temporary until core build files in artifactory -->
        <include name="*.jar"/>
      </fileset>
    </path>

    <java classname="org.mozilla.javascript.tools.shell.Main"
          fork="true"
          classpathref="build.classpath"
          args="build-res/pentaho-js-build/profileBuilder.js">
    </java>

    <!-- run js compilation -->
    <exec command="node">
      <arg value="build-res/pentaho-js-build/r.js"/>
      <arg value="-o"/>
      <arg value="${build.js.path}"/>
    </exec>

    <copy todir="${bin.dir}/js-source/compressed" >
      <fileset dir="${js.build.output.dir}"/>
    </copy>

    <copy todir="${bin.dir}/js-source/raw" >
      <fileset dir="${js.module.script.agg.dir}"/>
    </copy>

    <!-- copy ccc build -->
    <copy todir="${bin.dir}/js-source/compressed/cdf/lib/CCC">
      <fileset dir="${js.expanded.lib.dir}/ccc/amd"/>
    </copy>
    <!-- move file="${bin.dir}/js-source/compressed/cdf/lib/CCC/pvc.js" tofile="${bin.dir}/js-source/compressed/cdf/lib/CCC/pvc-d1.0.js"/ -->
    <copy todir="${bin.dir}/js-source/raw/cdf/lib/CCC">
      <fileset dir="${js.expanded.lib.dir}/ccc/amd"/>
    </copy>
    <!-- move file="${bin.dir}/js-source/raw/cdf/lib/CCC/pvc.js" tofile="${bin.dir}/js-source/raw/cdf/lib/CCC/pvc-d1.0.js"/ -->

    <zip destfile="${dist.dir}/${ivy.artifact.id}-${project.revision}-js.zip">
      <zipfileset dir="${bin.dir}/js-source" includes="**/*"/>
    </zip>

    <antcall target="dist-legacy-js" />
    <antcall target="write-resources" />


  </target>

  <target name="dist-legacy-js" description="Creates the js distribution for the legacy js">
    <!-- cdf-core/cdf/js -->
    <copy todir="${bin.dir}/js-source/${js.module.script.namespace}/js-legacy" overwrite="true">
      <fileset dir='${core-js-legacy.dir}'>
        <!-- include name="**/*"/ -->
        <exclude name="cdf.legacy.css"/>
        <exclude name="cdf.css"/>
      </fileset>
    </copy>
    <!-- handle legacy cdf.css files -->
    <copy file="${core-js-legacy.dir}/cdf.legacy.css"
              toFile="${bin.dir}/js-source/${js.module.script.namespace}/js-legacy/cdf.css"/>

    <!-- cdf-core/cdf/js-lib -->
    <copy todir="${bin.dir}/js-source/${js.module.script.namespace}/js-legacy/lib" overwrite="true">
      <fileset dir='${core-js-lib.dir}'>
        <!-- include name="**/*"/ -->
        <exclude name="${cdf-core-lib-require-js-cfg.name}"/>
        <exclude name="cdf.css"/>
      </fileset>
    </copy>
    <copy todir="${bin.dir}/js-source/${js.module.script.namespace}/js-legacy/lib" overwrite="true">
      <fileset dir='${core-js-legacy-lib.dir}'>
        <include name="**/*"/>
      </fileset>
    </copy>

    <!-- cdf-pentaho-base/cdf/js -->
    <copy todir="${bin.dir}/js-source/${js.module.script.namespace}/js-legacy" overwrite="true">
      <fileset dir='${pentaho-base-js-legacy.dir}'>
        <include name="**/*"/>
      </fileset>
    </copy>

    <!-- cdf-pentaho/cdf/js -->
    <copy todir="${bin.dir}/js-source/${js.module.script.namespace}/js-legacy" overwrite="true">
      <fileset dir='${pentaho-js-legacy.dir}'>
        <include name="**/*"/>
      </fileset>
    </copy>

    <!-- copy ccc build -->
    <copy todir="${bin.dir}/js-source/${js.module.script.namespace}/js-legacy/lib/CCC" >
      <fileset dir="${js.expanded.lib.dir}/ccc/pen"/>
    </copy>

    <!-- rename ccc files -->
    <move file="${bin.dir}/js-source/${js.module.script.namespace}/js-legacy/lib/CCC/pvc.js"
          tofile="${bin.dir}/js-source/${js.module.script.namespace}/js-legacy/lib/CCC/pvc-d1.0.js"/>

    <antcall target="replace-static-resource-labels">
      <param name="base.js.path" value="${bin.dir}/js-source/${js.module.script.namespace}/js-legacy" />
    </antcall>

  </target>

  <target name="write-resources">
    <!-- cdf-core/resource/resources.legacy.properties -->
    <property file="${core-resources.legacy.path}"/>
    <!-- cdf-pentaho-base/resource/resources.legacy.properties -->
    <property file="${base-resources.legacy.path}"/>
    <!-- cdf-pentaho5/resource/resources.properties -->
    <property file="${resources.path}"/>

    <!-- JS files need to maintain the original order -->
    <!-- cdf-core property core-scripts-1 -->
    <for list='${core-scripts-1}' param='filename'>
      <sequential>
        <propertyfile file="${stage-resources.path}">
          <entry key="script" operation="+" value="@{filename},"/>
        </propertyfile>
      </sequential>
    </for>
    <!-- cdf-pentaho property pentaho-scripts-1 -->
    <for list='${pentaho-scripts-1}' param='filename'>
      <sequential>
        <propertyfile file="${stage-resources.path}">
          <entry key="script" operation="+" value="@{filename},"/>
        </propertyfile>
      </sequential>
    </for>
    <!-- cdf-core property core-scripts-2 -->
    <for list='${core-scripts-2}' param='filename'>
      <sequential>
        <propertyfile file="${stage-resources.path}">
          <entry key="script" operation="+" value="@{filename},"/>
        </propertyfile>
      </sequential>
    </for>
    <!-- cdf-pentaho property pentaho-scripts-2 -->
    <for list='${pentaho-scripts-2}' param='filename'>
      <sequential>
        <propertyfile file="${stage-resources.path}">
          <entry key="script" operation="+" value="@{filename},"/>
        </propertyfile>
      </sequential>
    </for>
    <!-- cdf-core property core-scripts-3 -->
    <for list='${core-scripts-3}' param='filename'>
      <sequential>
        <propertyfile file="${stage-resources.path}">
          <entry key="script" operation="+" value="@{filename},"/>
        </propertyfile>
      </sequential>
    </for>
    <!-- cdf-pentaho-base property pentaho-base-scripts -->
    <for list='${pentaho-base-scripts}' param='filename'>
      <sequential>
        <propertyfile file="${stage-resources.path}">
          <entry key="script" operation="+" value="@{filename},"/>
        </propertyfile>
      </sequential>
    </for>
    <!-- cdf-pentaho property pentaho-scripts-3 -->
    <for list='${pentaho-scripts-3}' param='filename'>
      <sequential>
        <propertyfile file="${stage-resources.path}">
          <entry key="script" operation="+" value="@{filename},"/>
        </propertyfile>
      </sequential>
    </for>

    <!-- CSS files have no order enforced -->
    <!-- cdf-core property core-styles -->
    <for list='${core-styles}' param='filename'>
      <sequential>
        <propertyfile file="${stage-resources.path}">
          <entry key="link" operation="+" value="@{filename},"/>
        </propertyfile>
      </sequential>
    </for>
    <!-- cdf-pentaho-base property pentaho-base-styles -->
    <for list='${pentaho-base-styles}' param='filename'>
      <sequential>
        <propertyfile file="${stage-resources.path}">
          <entry key="link" operation="+" value="@{filename},"/>
        </propertyfile>
      </sequential>
    </for>
    <!-- cdf-pentaho property pentaho-styles -->
    <for list='${pentaho-styles}' param='filename'>
      <sequential>
        <propertyfile file="${stage-resources.path}">
          <entry key="link" operation="+" value="@{filename},"/>
        </propertyfile>
      </sequential>
    </for>
  </target>

  <!--=======================================================================
   install-plugin

   Installs the plugin locally
   ====================================================================-->
  <target name="install-plugin" depends="dist" description="Installs the plugin locally in solution/system/pentaho-cdf">
    <echo>Installing plugin in ${plugin.local.install.solutions.dir}/system/${plugin.name}</echo>
    <fail message="plugin.local.install.solutions.dir not set - cannot copy"
          unless="plugin.local.install.solutions.dir"/>

    <delete dir="${plugin.local.install.solutions.dir}/system/${plugin.name}"/>
    <!-- Copy plugin -->
    <copy todir="${plugin.local.install.solutions.dir}/system/${plugin.name}">
      <fileset dir="${stage.dir}/${plugin.name}">
        <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <target name="dist-samples" depends="init">
    <mkdir dir="${samples.stage.dir}"/>
    <!-- copy over all the xactions within the pentaho-cdf folder -->
    <copy todir="${samples.stage.dir}/plugin-samples" overwrite="true">
      <fileset dir="solution/plugin-samples"></fileset>
    </copy>

    <zip zipfile="${dist.dir}/${plugin.samples.zipfile}"
         basedir="${samples.stage.dir}/plugin-samples"
         includes="**/*"
         excludes="**/Thumbs.db"
        />
  </target>

  <target name="resolve" depends="resolve-default, resolve-test, resolve-runtime, ivy.check-releasable"
          description="Retrieves all the dependent libraries"/>

  <target name="resolve-runtime" depends="resolve-init">
    <ivy:resolve file="${ivyfile}" conf="runtime"/>
    <ivy:retrieve conf="runtime" pattern="runtime-lib/[module]-[revision](-[classifier]).[ext]"/>
  </target>

  <target name="replace-static-resource-labels">
    <property file="${basedir}/build.properties"/>
    <property name="base.js.path" value=""/>

    <!-- modifications needed for core-refator components/ccc.js -->
    <!-- TODO: review ccc dep -->
      <replace file="${base.js.path}/components/ccc.js" token="@CDF_CCC_REQUIRE_HEADER@" value="${cdf.ccc.require.header}" />
    	<replace file="${base.js.path}/components/ccc.js" token="@CDF_CCC_PUBLISHED_GLOBALLY@" value="${cdf.ccc.published.globally}" />
    	<replace file="${base.js.path}/components/ccc.js" token="@CDF_CCC_VAR_DECLARATION@" value="${cdf.ccc.var.declaration}" />
    	<replace file="${base.js.path}/components/ccc.js" token="@CDF_CCC_REQUIRE_FOOTER@" value="${cdf.ccc.require.footer}" />

  </target>

  <target name="publish-nojar" depends="subfloor-js.js.publish-nojar, subfloor-pkg.publish-nojar"/>

  <target name="maven-publish.post">
    <ivy:makepom ivyfile="package-ivy-samples.xml" pomfile="samples-pom.xml"/>
    <antcall target="maven-publish-artifact">
      <param name="publish.pomFile" value="samples-pom.xml"/>
      <param name="publish.file" value="${dist.dir}/${plugin.samples.zipfile}"/>
    </antcall>
  </target>

  <target name="run-karma" depends="install-antcontrib, npm-install">

    <!-- compile the require file -->
    <echo message="Collecting RequireJS Configurations"/>
    <delete file="build-res/requireCfg-raw.js"/>
    <concat destfile="build-res/requireCfg-raw.js" append="true" force="yes">
      <fileset dir="../cdf-core/cdf" casesensitive="yes">
        <include name="*/*-require-js-cfg.js"/>
      </fileset>
      <fileset dir="../cdf-pentaho-base/cdf" casesensitive="yes">
        <include name="*/*-require-js-cfg.js"/>
      </fileset>
      <fileset dir="cdf/js-modules" casesensitive="yes">
        <include name="*-require-js-cfg.js"/>
      </fileset>
    </concat>

    <!-- Check to see if karma is on the PATH -->
    <available file="karma" filepath="${env.PATH}" property="karma-is-available"/>
    <available file="karma.cmd" filepath="${nodemodules.local.dir.bin}" property="karma-is-available-windows"/>

    <if>
      <isset property="isWindows"/>
      <then>
        <if>
          <not>
            <isset property="karma-is-available-windows"/>
          </not>
          <then>
            <echo message="${nodemodules.local.dir.bin}"/>
            <fail>karma.cmd is not available on the '${nodemodules.local.dir.bin}'. Unit tests could not be run.</fail>
          </then>
        </if>
      </then>
      <else>
        <if>
          <not>
            <isset property="karma-is-available"/>
          </not>
          <then>
            <fail>karma is not available on the PATH. Unit tests could not be run.</fail>
          </then>
        </if>
      </else>
    </if>
    <if>
      <available file="${js.karma.ci.config}"/>
      <then>
        <if>
          <isset property="isWindows"/>
          <then>
            <!-- we have karma available, use it to run the tests -->
            <exec executable="${nodemodules.local.dir.bin}\karma.cmd">
              <arg value="start"/>
              <arg value="${js.karma.ci.config}"/>
              <!-- if we are running via ant, then assume we must 'single-run' -->
              <arg value="--single-run"/>
            </exec>
          </then>
          <else>
            <!-- we have karma available, use it to run the tests -->
            <exec executable="karma">
              <arg value="start"/>
              <arg value="${js.karma.ci.config}"/>
              <!-- if we are running via ant, then assume we must 'single-run' -->
              <arg value="--single-run"/>
            </exec>
          </else>
        </if>
      </then>
      <else>
        <fail>There is no karma configuration file available (looking for: ${js.karma.ci.config})</fail>
      </else>
    </if>
  </target>

  <target name="test-js-require" depends="subfloor-js.resolve-js">

    <!-- create test resources dir 'bin/test-js-res/cdf/js-lib' -->
    <delete dir="${test-js-res.js-lib.dir}"/>
    <mkdir dir="${test-js-res.js-lib.dir}"/>
    <!-- create test resources dir 'bin/test-js-res/cdf/js-modules' -->
    <delete dir="${test-js-res.js-modules.dir}"/>
    <mkdir dir="${test-js-res.js-modules.dir}"/>

    <!-- copy CDF js libs into bin/test-js-res/cdf/js-lib -->
    <copy todir="${test-js-res.js-lib.dir}" overwrite="true">
      <!-- copy core CDF js libs -->
      <fileset dir="${core-js-lib.dir}">
        <exclude name="**/*-require-js-cfg.js*"/>
      </fileset>
    </copy>

    <!-- copy CDF js amd modules into bin/test-js-res/cdf/js-modules -->
    <copy todir="${test-js-res.js-modules.dir}" overwrite="true">
      <!-- copy core CDF js amd modules -->
      <fileset dir="${core-js.dir}">
        <exclude name="**/*-require-js-cfg.js*"/>
      </fileset>
      <!-- copy base CDF js amd modules -->
      <fileset dir="${pentaho-base-js.dir}">
        <exclude name="**/*-require-js-cfg.js*"/>
      </fileset>
      <!-- copy pentaho5 CDF js amd modules -->
      <fileset dir="${pentaho-js.dir}">
        <exclude name="**/*-require-js-cfg.js*"/>
      </fileset>
    </copy>

    <!-- run karma -->
    <antcall target="run-karma"/>
  </target>

  <target name="test-js-legacy">
    <antcall target="run-karma">
      <param name="js.karma.ci.config" value="${js.karma.ci.config.legacy}"/>
    </antcall>
  </target>

  <target name="test-js" depends="test-js-require, test-js-legacy">
  </target>

</project>
